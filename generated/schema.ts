// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balances(): Array<string> | null {
    let value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set balances(value: Array<string> | null) {
    if (!value) {
      this.unset("balances");
    } else {
      this.set("balances", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenBalance", id.toString(), this);
    }
  }

  static load(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(store.get("TokenBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userPointed(): string {
    let value = this.get("userPointed");
    return value!.toString();
  }

  set userPointed(value: string) {
    this.set("userPointed", Value.fromString(value));
  }

  get tokenPointed(): string {
    let value = this.get("tokenPointed");
    return value!.toString();
  }

  set tokenPointed(value: string) {
    this.set("tokenPointed", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get holdingAtleast1Since(): BigInt {
    let value = this.get("holdingAtleast1Since");
    return value!.toBigInt();
  }

  set holdingAtleast1Since(value: BigInt) {
    this.set("holdingAtleast1Since", Value.fromBigInt(value));
  }

  get holdingAtleast10Since(): BigInt {
    let value = this.get("holdingAtleast10Since");
    return value!.toBigInt();
  }

  set holdingAtleast10Since(value: BigInt) {
    this.set("holdingAtleast10Since", Value.fromBigInt(value));
  }

  get holdingAtleast100Since(): BigInt {
    let value = this.get("holdingAtleast100Since");
    return value!.toBigInt();
  }

  set holdingAtleast100Since(value: BigInt) {
    this.set("holdingAtleast100Since", Value.fromBigInt(value));
  }

  get holdingAtleast1000Since(): BigInt {
    let value = this.get("holdingAtleast1000Since");
    return value!.toBigInt();
  }

  set holdingAtleast1000Since(value: BigInt) {
    this.set("holdingAtleast1000Since", Value.fromBigInt(value));
  }

  get holdingAtleast10000Since(): BigInt {
    let value = this.get("holdingAtleast10000Since");
    return value!.toBigInt();
  }

  set holdingAtleast10000Since(value: BigInt) {
    this.set("holdingAtleast10000Since", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get birth(): BigInt {
    let value = this.get("birth");
    return value!.toBigInt();
  }

  set birth(value: BigInt) {
    this.set("birth", Value.fromBigInt(value));
  }

  get transfers(): BigInt {
    let value = this.get("transfers");
    return value!.toBigInt();
  }

  set transfers(value: BigInt) {
    this.set("transfers", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value!.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get roles(): Array<string> | null {
    let value = this.get("roles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set roles(value: Array<string> | null) {
    if (!value) {
      this.unset("roles");
    } else {
      this.set("roles", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Role extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Role entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Role must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Role", id.toString(), this);
    }
  }

  static load(id: string): Role | null {
    return changetype<Role | null>(store.get("Role", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenPointed(): string {
    let value = this.get("tokenPointed");
    return value!.toString();
  }

  set tokenPointed(value: string) {
    this.set("tokenPointed", Value.fromString(value));
  }

  get roleType(): Bytes {
    let value = this.get("roleType");
    return value!.toBytes();
  }

  set roleType(value: Bytes) {
    this.set("roleType", Value.fromBytes(value));
  }

  get roleHolder(): string {
    let value = this.get("roleHolder");
    return value!.toString();
  }

  set roleHolder(value: string) {
    this.set("roleHolder", Value.fromString(value));
  }
}
